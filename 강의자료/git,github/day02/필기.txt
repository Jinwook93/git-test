1. revert
 git revert (돌아갈 커밋 해시)
 add George에 있는 변화만 골라서 제거, 다른 과정 유지

 git revert --continue : revert 그대로 진행

 - revert 명령어를 사용하면 자동 commit 까지 이루어진다.
 commit 은 하지않고 revert 하기, 원하는 다른 작업을 추가한
 다음에 함께 커밋
 git revert --no-commit (되돌릴 커밋 해시)
 
 - 취소하려면
 git reset --hard

2. branch  만들기
 - 분기된 가지
 - 프로젝트를 하나 이상의 모습응로 관리해야 할때
  예)실배포용, 테스트서버용, 새로운 시도용
 - 여러 작업들이 각각 독립되어 진행될 때
  예) 신기능1, 신기능2, ...
 - 각각의 가지(차원)에서 작업한 뒤 확정된 것을 메인 차원에
 통합

 2-1. 브랜치 생성/이동/삭제
 - add-coach란 이름의 브랜치 생성
 git branch add-coach

 - 브랜치 목록 확인
 git branch

 - add-coach 브랜치로 이동
 git switch add-coach

 - 브랜치 생성과 동시에 이동
 git switch -c (새브랜치명)
 브랜치명 : new-teams

 - 브랜치 삭제하기
 git branch -d (삭제할 브랜치명)

 - 브랜치 강제삭제
 git branch -D (삭제할 브랜치명)

 - 브랜치 이름 바꾸기
 git branch -m (기본 브랜치명) (새 브랜치명)


 2-2. 결과 살펴보기
 git log : 위치한 브랜치에서의 내역만 볼 수 있음
 git log --all --decorate --oneline --graph

 2-3. 서로 다른 브랜치를 합치는 두 방식
  - merge
	: 두 브랜치를 한 커밋에 이어 붙인다.
	브랜치 사용내역을 남길 필요가 있을 때 적합한 방식
  - rebase
	: 브랜치를 다른 브랜치에 이어 붙인다
	한 줄로 깔끔히 정리된 내역을 유지하기 위해 사용
	이미 팀원과 공유된 커밋들에 대해서는 사용하지
	않는 것이 좋다

 2-4. merge
 - add-coach 브랜치를 main 브랜치로 merge
 git merge add-coach

 2-5. rebase
 - new-teams 브랜치를 main 브랜치로 rebase
 - merge때와는 반대로 생각
 git rebase main

 2-6. 브랜치간 충돌 해결하기 - merge
 -  파일의 같은 위치에 다른 내용이 입력된 상황
 - 충돌 내용이 너무 많아서 merge를 중단해야 할 때는
	git merge --abort




Merge 충돌을 해결하는 과정은 기본적으로 다음과 같습니다. Merge 충돌이 발생하면 Git은 충돌 부분을 표시하고 사용자가 수동으로 충돌을 해결해야 합니다.

Merge 충돌 확인:
Merge를 수행할 때 충돌이 발생하면 Git은 충돌이 발생한 파일을 알려줍니다.

충돌 파일 열기:
충돌이 발생한 파일을 텍스트 편집기로 엽니다. 파일 내부에는 충돌을 나타내는 특수한 마크업이 삽입되어 있습니다.

충돌 해결:
충돌 해결은 각 충돌 부분을 적절히 수정하고, 원하는 최종 결과를 만들어내는 작업입니다. 충돌 부분은 아래와 같은 형태로 표시됩니다:

plaintext
Copy code
<<<<<<< HEAD
현재 브랜치의 내용
=======
병합할 대상 브랜치의 내용
>>>>>>> branch-name
이 부분을 원하는 대로 수정하여 충돌을 해결합니다.

충돌 해결 후 스테이징:
충돌을 해결한 후에는 스테이징 영역에 추가합니다.

bash
Copy code
git add <conflicted-file>
Merge 계속 진행:
충돌이 발생한 파일을 스테이징한 후에는 merge를 계속 진행합니다.

bash
Copy code
git merge --continue
또는 충돌 발생 시에 직접 merge를 계속 진행할 수 있습니다:

bash
Copy code
git merge --continue
Merge 완료:
Merge를 완료하고 커밋합니다.

bash
Copy code
git commit
이제 충돌이 해결되고, 새로운 커밋이 생성되어 Merge가 완료됩니다. 충돌 해결은 주로 협업하거나 여러 기능을 병합할 때 발생하므로, 명확한 커뮤니케이션과 협업이 필요합니다. 충돌이 발생하면 다른 팀원들과 함께 의논하고 적절한 해결 방법을 찾는 것이 중요합니다.
 
 2-7. 브랜치간 충돌 해결하기 - rebase


git rebase --continue 명령은 Git에서 rebase 작업 중에 충돌이 발생했을 때, 충돌을 해결하고 다음 커밋으로 계속 진행하는 명령입니다.

Rebase는 브랜치의 기록을 다른 브랜치의 최신 기록에 합칠 때 사용되며, 이때 충돌이 발생할 수 있습니다. 충돌이 발생하면 Git은 해당 충돌을 해결하고 다음 작업을 계속 진행하라고 명령하는데, 이때 git rebase --continue를 사용합니다.

충돌이 발생한 후 다음과 같은 단계를 따릅니다:

충돌을 해결합니다.
git add 명령을 사용하여 충돌을 해결한 파일을 스테이징 영역에 추가합니다.
git rebase --continue 명령을 실행하여 rebase를 계속합니다

3. Git Hub
 - 오픈소스의 성지

4. 토큰생성
 
5. Repository
 git remote add origin https://github.com/iamkj8812/git-test.git
	-> 로컬의 git 저장소에 원격 저장소로의 연결 추가
 git branch -M main
	-> github 권장, 기본 브랜치 명을 main으로
 git push -u origin main
	-> 로컬 저장소의 커밋 내역들 원격으로 push(업로드)
	-> main branch에서의 push는 늘 origin 원격소로 전달이 된다.

5. 원격저장소에 있는 코드 local로 가져오기
 git clone (원격저장소 주소)










